@extends('cell')
@section('list')
<div class="row">
<div class="psv-txt" style="width:100%">


<!-- CONTENT -->


<h3>Пакеты библиотек, импорт пакетов</h3>
<hr/>
<p>
    В языке Java установлена пакетная логика, где путь к нужным данным, классам и библиотекам классов
    указывается с помощью пакетов, то есть папок и путей к ним. Например в языке PHP действует логика
    пространств имён (name spaces).
</p>
<p>
    Пространства имён дают определённую гибкость при написании кода, позволяя вызывать методы и подключать
    библиотеки разных участках кода, но в Java подобная гибкость упраздена в пользу лучшей читаемости
    и предсказуемости кода, где все подключения должны иметь своё физическое место на диске.
</p>
<p class="accent">
    Все файлы Java-кода должны быть объявлены в пакете, который соответсвует их местонахождению в файловой системе.
    Обявление делается самом начале файла, ключевым словом <span class="code-txt">package</span>, где папки
    разделены точкой:
<p class="code-txt">
    package one.two.three;
</p>
<p>
    Исключение может составлять только тестовый java-файл, на подобие <span class="accent">Hello, World!</span>,
    который имеет метод <span class="code-txt">main</span> для краткой отладки сниппета (snippet - фрагмент кода).
    В языке PHP такую роль в начале файла выполняет объявление пространста имён
</p>
<p class="code-txt">
    namespace One\Two\Three;
</p>
    В PHP это не обязательно строго указанная папка, но что в php, что в java без такого объявления не возможно будет
    воспользоваться кодом данного файла в своём коде, то есть вызвать его из своего кода.
</p>
<p class="accent">
    В Java вызов внешнего класса называется импортом.
</p>
<p>
    Папка, в которой находится вызываемый класс (например FileName.class) называется пакетом. Для того, чтоб использовать
    этот класс в другом пакете нужно его импортировать в свой класс, с помощью ключевого слова import
    (см.ключевые слова):
</p>
<p class="code-txt">
    import papka.FileName;
</p>
<p>
    Любая программа, то есть любой класс уже содержит заимпортированный по-умолчанию пакет
    <span class="code-txt">java.lang</span>, хотя это явно не указано:
</p>
<p>
    <span class="code-txt">import java.lang.*;</span> - при импорте звездочка означает ВСЕ классы пакета, но не подпакеты.
</p>
<p>
    Этот пакет содержит самые необходимые для языка програмирования Java классы, процедуры и методы.
</p>
<p>
    Библиотека Java (Java API) содержит множество классов, кроме того программисты создают еще и свои. Классы
    принято объеденять в библиотеки, но библиотека не является составной частью языка, для этого разработчики ввели понятие
    "пакет" (package). <span class="accent">Каждый пакет внутри себя может иметь большое количество классов, подпакетов,
    классов и интерфейсов.</span>
</p>
<p>
    <i>Файл - это именованная область данных (модуль) на физическом носителе информации. В технических терминах инфо-технологий
    папка отличается от файла наличием других файлов внутри себя и определенным разширением через точку в конце имени. Также и
    для Java машины (JVM) и папка и файл это одно и тоже, что можно заметить при работе с файловой системой при помощи
    специальной библиотеки, где эти два понятия представляются экземплярами класса <span class="code-txt">File</span>
    практически равнозначно</i>
</p>
<p>
    Каждый исходный модуль (файл с кодом) может иметь только одну строку <span class="code-txt">package</span>,
    поэтому при компиляции и запуске класс-файлы должны располагаться именно в этом, указанном, каталоге.
    Модуль (один файл класса) может иметь только один <span class="code-txt">public</span> класс и имя
    <span class="code-txt">public</span> класса должно совпадать с именем модуля (файла), для того,
    чтобы извне пакета его запускать и иметь к нему доступ.
</p>
<p>
    Внутри одного пакета классы могут иметь доступ, либо к <span class="code-txt">public</span> методам и полям,
    либо к <span class="code-txt">protected</span> методам и полям, которые видны в пределах одного пакета.
</p>
<p>
    <span class="code-txt">System.out.println()</span> - это полное имя метода вывода на консоль.
    То есть, в <span class="code-txt">java.lang</span> пакете имеется класс System, а у этого класса есть переменная
    <span class="code-txt">out</span>. Для того, чтоб сократить этот вызов можно импортировать этот класс и это поле
    напрямую в файл кода.
    Но так как поле <span class="code-txt">out</span> статическое (для доступа без создавания объектов), то импорт
    тоже должен быть <span class="code-txt">static</span>.
</p>
<p class="accent-strong">
    Статический импорт очень редкая операция в языке Java, чего не скажешь про язык PHP, и тут он приведён
    в качестве примера для общей картины программирования в целом.
</p>

<p>
    Файл <span class="accent">ImportLauncher.java</span> нужно сохранить в папку "myPackage", иначе компилятор будет возражать.
    И при работе из командной консоли запускать компилятор и запускать на выполнение нужно из внешней папки.
    Вот так:
</p>

<p>
    <span class="code-txt">javac myPackage\ImportLauncher.java</span> - обратный слэш для Windows
</p>

<p>
    <span class="code-txt">java my1.MyClass</span> - точка, или слэш ( / ) подходит для Java
</p>

<pre><code><div class="code-block"><div class="code">
package myPackage;

import java.lang.*;               <span class="comment">// необязательный оператор</span>

import static java.lang.System.out;    <span class="comment">// статический импорт</span>

public class ImportLauncher
{
    public static void main(String[]args)
    {
        <span class="red"><strong>out.println</strong></span>(<span class="string">"In ImportLauncher.class!"</span>);   <span class="comment">// без System</span>

        AClass aClass = new AClass();

        aClass.setAndPrintA(10);              <span class="comment">// protected метод</span>
    }
}

class AClass
{
    int a = 0;

    protected void setAndPrintA(int a)             <span class="comment">//protected</span>
    {
        this.a = a;
        <span class="red"><strong>out.println</strong></span>(<span class="string">"Method setAndPrintA: "</span> + a + <span class="string">" in AClass"</span>);
    }
}

</div></div></code></pre>






<!-- CONTENT -->


</div>
</div>

@endsection